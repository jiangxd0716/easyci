{"remainingRequest":"E:\\easy-ci\\easyci-ui\\node_modules\\thread-loader\\dist\\cjs.js!E:\\easy-ci\\easyci-ui\\node_modules\\babel-loader\\lib\\index.js!E:\\easy-ci\\easyci-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\easy-ci\\easyci-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\easy-ci\\easyci-ui\\src\\components\\views\\Easyci.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\easy-ci\\easyci-ui\\src\\components\\views\\Easyci.vue","mtime":1574661417259},{"path":"E:\\easy-ci\\easyci-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574309234639},{"path":"E:\\easy-ci\\easyci-ui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1574309612056},{"path":"E:\\easy-ci\\easyci-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1574309219742},{"path":"E:\\easy-ci\\easyci-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574309234639},{"path":"E:\\easy-ci\\easyci-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1574309627458}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'easyci',\n  props: {\n    msg: String\n  },\n  data: function data() {\n    return {\n      params: {\n        username: '',\n        password: ''\n      },\n      dialogTableVisible: false,\n      tableData: [],\n      localtableData: [],\n      langopt: [{\n        label: 'java'\n      }, {\n        label: 'vue'\n      }],\n      langu: '',\n      serverid: '',\n      deployopt: [],\n      gitlabPro: [],\n      deploy_way: '',\n      searchServerList: [],\n      deployServerList: [],\n      showInsertServe: false,\n      form: {\n        server: '',\n        port: '',\n        username: '',\n        password: '',\n        islocal: 0\n      },\n      giturl: '',\n      ports: '',\n      maillist: '',\n      textarea: '',\n      start: 0,\n      status: true,\n      dialogVisible: false,\n      websocket: null,\n      stompClient: null,\n      deployLog: '',\n      deploying_project: '',\n      dockerlogVisible: false,\n      img: '',\n      isDockerPsOne: false,\n      isReSet: false,\n      isAutoFresh: false,\n      isLoginGitLabVisible: false,\n      formLabelWidth: '120px',\n      freshnum: 0,\n      container_name: '',\n      server_ip: '',\n      loginmessage: false,\n      loginform: {\n        username: '',\n        password: '',\n        githost: ''\n      },\n      random: '',\n      rules: {\n        githost: [{\n          required: true,\n          message: '地址不可为空',\n          trigger: 'blur'\n        }],\n        username: [{\n          required: true,\n          message: '账号不可为空',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '密码不可为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    // //连接发生错误的回调方法\n    // this.websocket.onerror = function(){\n    //   console.log(\"error\");\n    // };\n    //\n    // //连接成功建立的回调方法\n    // this.websocket.onopen = function(event){\n    //   console.log(\"open\");\n    // }\n    //\n    // //接收到消息的回调方法\n    // this.websocket.onmessage = function(event){\n    //   console.log(event.data);\n    // }\n    //\n    // //连接关闭的回调方法\n    // this.websocket.onclose = function(){\n    //   let that = this\n    //   that.textarea = \"close\";\n    // }\n    //\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n    window.onbeforeunload = function () {\n      var that = this;\n      that.websocket.close();\n      that.stompClient.disconnect();\n      that.websocket = null;\n      that.stompClient = null;\n    }; // this.getSearchServerList();\n    // this.getDeployServerList();\n    // // this.getProjects();\n    // this.getDockerPs();\n    // this.getLocalPs();\n\n\n    this.IsSetSystemSetting();\n  },\n  methods: {\n    getProjects: function getProjects() {\n      var that = this;\n      this.axios.post('/api/gitlab/projects', {}).then(function (response) {\n        if (response.data.status) {\n          that.gitlabPro = response.data.list;\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    onSubmit: function onSubmit(formName) {\n      var that = this;\n      this.startLoading(\"验证中…\");\n      this.axios.post('/api/gitlab/login', {\n        username: that.loginform.username,\n        password: that.loginform.password,\n        githost: that.loginform.githost\n      }).then(function (response) {\n        that.endLoading();\n\n        if (response.data.status) {\n          that.$message.success(response.data.errorDesc);\n          that.isLoginGitLabVisible = false;\n          that.getSearchServerList();\n          that.getDeployServerList();\n          that.getProjects();\n          that.getDockerPs();\n          that.getLocalPs();\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    IsSetSystemSetting: function IsSetSystemSetting() {\n      var that = this;\n      this.axios.post('/api/gitlab/isSet', {}).then(function (response) {\n        if (response.data.status) {\n          that.isLoginGitLabVisible = false;\n          that.getSearchServerList();\n          that.getDeployServerList();\n          that.getProjects();\n          that.getDockerPs();\n          that.getLocalPs();\n        } else {\n          that.isLoginGitLabVisible = true;\n          that.$message.error(response.data.errorDesc);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getDockerPs: function getDockerPs() {\n      var that = this;\n      this.axios.post('/api/docker/allps', {}).then(function (response) {\n        // that.$message(response.data.errorDesc);\n        if (response.data.status) {\n          if (response.data.list.status === \"Up\") {\n            that.img = require(\"../../assets/static/up.png\");\n          } else {\n            that.img = require(\"../../assets/static/down.png\");\n          }\n\n          that.tableData = response.data.list;\n        } else {\n          that.showInsertServe = true;\n          that.$message.error(\"请添加服务器\");\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getSearchServerList: function getSearchServerList() {\n      var that = this;\n      this.axios.get('/api/server/searchServerList', {}).then(function (response) {\n        that.searchServerList = response.data.list;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getDeployServerList: function getDeployServerList() {\n      var that = this;\n      this.axios.get('/api/server/deployServerList', {}).then(function (response) {\n        that.deployServerList = response.data.list;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    autoFresh: function autoFresh() {\n      var _this = this;\n\n      var that = this;\n      that.freshnum = 0;\n      that.isAutoFresh = !that.isAutoFresh;\n      var a = setInterval(function () {\n        if (that.isAutoFresh) {\n          if (that.freshnum === 0) {\n            that.$message(\"开启自动刷新\");\n          }\n\n          if (!that.isReSet && that.isDockerPsOne) {\n            if (that.serverid != null && that.serverid !== '') {\n              _this.getOnePs();\n            }\n\n            _this.getLocalPs();\n\n            that.freshnum += 1;\n          } else {\n            that.freshnum += 1;\n\n            _this.getDockerPs();\n\n            _this.getLocalPs();\n          }\n        } else {\n          clearInterval(a);\n          that.$message(\"关闭自动刷新\");\n        }\n      }, 1000);\n    },\n    resetPs: function resetPs() {\n      var that = this;\n      that.serverid = '';\n      that.isReSet = true;\n      this.getDockerPs();\n      this.getLocalPs();\n    },\n    getLocalPs: function getLocalPs() {\n      var that = this;\n      this.axios.post('/api/docker/localps', {}).then(function (response) {\n        // that.$message(response.data.errorDesc);\n        if (response.data.list.status === \"Up\") {\n          that.img = require(\"../../assets/static/up.png\");\n        } else {\n          that.img = require(\"../../assets/static/down.png\");\n        }\n\n        that.localtableData = response.data.list;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getOnePs: function getOnePs() {\n      var that = this;\n\n      if (this.serverid == null || this.serverid === '') {\n        that.$message.warning(\"请选择服务器ip\");\n        return false;\n      }\n\n      this.axios.post('/api/docker/oneps', {\n        serverid: this.serverid\n      }).then(function (response) {\n        // that.$message(response.data.errorDesc);\n        that.tableData = response.data.list;\n        that.isDockerPsOne = response.data.status;\n        that.isReSet = !response.data.status;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    add: function add() {\n      this.showInsertServe = !this.showInsertServe;\n    },\n    addserver: function addserver() {\n      var that = this;\n      this.startLoading(\"认证中…\");\n      this.axios.post('/api/server/add', {\n        server_ip: this.form.server,\n        server_port: this.form.port,\n        server_username: this.form.username,\n        server_password: this.form.password,\n        is_local: this.form.islocal\n      }).then(function (response) {\n        that.endLoading();\n\n        if (response.data.status) {\n          that.$message.success(response.data.errorDesc);\n          that.showInsertServe = false;\n          that.reflashPage();\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      });\n    },\n    deploy: function deploy() {\n      var that = this;\n      that.status = true;\n      that.dialogVisible = true;\n      that.textarea = '';\n      setTimeout(function () {\n        that.logs();\n      }, 3000);\n      this.axios.post('/api/docker/build', {\n        giturl: this.giturl,\n        ports: this.ports,\n        language: this.langu,\n        mails: this.maillist,\n        deploy_way: this.deploy_way\n      }).then(function (response) {\n        that.status = response.data.status;\n\n        if (!response.data.status) {\n          that.dialogVisible = response.data.status;\n          that.$message.error(response.data.errorDesc);\n        } else {\n          that.$message.success(response.data.errorDesc);\n\n          if (that.isDockerPsOne) {\n            if (that.serverid != null && that.serverid !== '') {\n              that.getOnePs();\n            }\n\n            that.getLocalPs();\n          } else {\n            that.getDockerPs();\n            that.getLocalPs();\n          }\n        }\n      });\n    },\n    logs: function logs() {\n      this.start = 0;\n      this.deployLogs();\n    },\n    deployLogs: function deployLogs() {\n      var that = this;\n      this.axios.post('/api/docker/deployLogs', {\n        giturl: this.giturl,\n        deploy_way: this.deploy_way,\n        start: this.start\n      }).then(function (response) {\n        if (response.data.list.log === \"…\") {\n          that.textarea = \"\";\n          that.deployLogs();\n        } else {\n          that.textarea += response.data.list.log;\n          that.start = response.data.list.start;\n\n          if (response.data.list.endsign !== 0) {\n            that.deployLogs();\n            var textarea1 = document.getElementById('textarea_id');\n            textarea1.scrollTop = textarea1.scrollHeight;\n          }\n        }\n      });\n    },\n    dockerLogs: function dockerLogs(row) {\n      var that = this;\n      that.dockerlogVisible = true;\n      that.deployLog = '';\n      that.random = Math.floor(Math.random() * 20);\n      that.container_name = row.container_name;\n      that.server_ip = row.server_ip; // this.axios.post('/api/docker/dockerLogs', {\n      //   container_name: row.container_name,\n      //   server_ip: row.server_ip\n      // },).then(function (response) {\n      //   // that.textarea += response.data.list.log\n      //   // that.start = response.data.list.start\n      //   // const textarea1 = document.getElementById('textarea_id');\n      //   // textarea1.scrollTop = textarea1.scrollHeight;\n      //   if (! that.dockerlogVisible) {\n      //     return\n      //   }\n      // })\n\n      var name = row.container_name + \"|\" + that.random + \"|\" + row.server_ip;\n\n      if ('WebSocket' in window) {\n        this.websocket = new WebSocket(\"ws://\" + location.hostname + \":9875/websocket/\" + name);\n      } else {\n        alert('Not support websocket');\n      }\n\n      if (that.dockerlogVisible) {\n        that.openSocket();\n      } else {\n        that.closeWebSocket();\n        that.closeSocket();\n      }\n    },\n    killDockerLogs: function killDockerLogs(row) {\n      var that = this;\n      this.axios.post('/api/docker/killLogs', {\n        container_name: that.container_name,\n        server_ip: that.server_ip\n      }).then(function (response) {\n        if (response.data.status) {\n          that.$message(\"关闭实时日志\");\n        }\n      });\n    },\n    killBuild: function killBuild() {\n      var that = this;\n      this.axios.post('/api/docker/killbuild', {\n        giturl: that.giturl\n      }).then(function (response) {\n        if (response.data.status) {\n          that.$message(\"关闭构建\");\n          that.status = false;\n        }\n      });\n    },\n    startDocker: function startDocker(row) {\n      var that = this;\n      this.startLoading(\"启动中…\");\n      this.axios.post('/api/docker/dockerExec', {\n        container_name: row.container_name,\n        server_ip: row.server_ip,\n        cmd: 'start'\n      }).then(function (response) {\n        that.endLoading();\n\n        if (response.data.status) {\n          that.$message.success(response.data.errorDesc);\n\n          if (that.isDockerPsOne) {\n            if (that.serverid != null && that.serverid !== '') {\n              that.getOnePs();\n            }\n\n            that.getLocalPs();\n          } else {\n            that.getDockerPs();\n            that.getLocalPs();\n          }\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      });\n    },\n    stopDocker: function stopDocker(row) {\n      var that = this;\n      this.startLoading(\"停止中…\");\n      this.axios.post('/api/docker/dockerExec', {\n        container_name: row.container_name,\n        server_ip: row.server_ip,\n        cmd: 'stop'\n      }).then(function (response) {\n        that.endLoading();\n\n        if (response.data.status) {\n          that.$message.success(response.data.errorDesc);\n\n          if (that.isDockerPsOne) {\n            if (that.serverid != null && that.serverid !== '') {\n              that.getOnePs();\n            }\n\n            that.getLocalPs();\n          } else {\n            that.getDockerPs();\n            that.getLocalPs();\n          }\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      });\n    },\n    restartDocker: function restartDocker(row) {\n      var that = this;\n      this.startLoading(\"重启中…\");\n      this.axios.post('/api/docker/dockerExec', {\n        container_name: row.container_name,\n        server_ip: row.server_ip,\n        cmd: 'restart'\n      }).then(function (response) {\n        that.endLoading();\n\n        if (response.data.status) {\n          that.$message.success(response.data.errorDesc);\n\n          if (that.isDockerPsOne) {\n            if (that.serverid != null && that.serverid !== '') {\n              that.getOnePs();\n            }\n\n            that.getLocalPs();\n          } else {\n            that.getDockerPs();\n            that.getLocalPs();\n          }\n        } else {\n          that.$message.error(response.data.errorDesc);\n        }\n      });\n    },\n    destroyDocker: function destroyDocker(row) {\n      var that = this;\n      this.startLoading(\"销毁中…\");\n\n      if (row.status === \"Up\") {\n        that.$message.warning(\"请先停止容器！\");\n        that.endLoading();\n        return false;\n      } else {\n        this.axios.post('/api/docker/dockerExec', {\n          container_name: row.container_name,\n          server_ip: row.server_ip,\n          cmd: 'rm'\n        }).then(function (response) {\n          that.endLoading();\n\n          if (response.data.status) {\n            that.$message.success(response.data.errorDesc);\n\n            if (that.isDockerPsOne) {\n              if (that.serverid != null && that.serverid !== '') {\n                that.getOnePs();\n              }\n\n              that.getLocalPs();\n            } else {\n              that.getDockerPs();\n              that.getLocalPs();\n            }\n          } else {\n            that.$message.error(response.data.errorDesc);\n          }\n        });\n      }\n    },\n    // sendmessage(){\n    //   let that = this\n    //   that.postValue.id=1;\n    //   that.postValue.message=1;\n    //   this.websocket.send(JSON.stringify(that.postValue));\n    // },\n    //关闭连接\n    closeWebSocket: function closeWebSocket() {\n      var that = this;\n\n      if (this.websocket != null) {\n        this.websocket.close();\n      }\n\n      that.dockerlogVisible = false;\n    },\n    openSocket: function openSocket() {\n      var that = this;\n\n      if (this.stompClient == null) {\n        var socket = new this.SockJS('http://' + location.hostname + ':9875/websocket');\n        this.stompClient = this.Stomp.over(socket);\n        this.stompClient.connect({}, function () {\n          that.stompClient.subscribe('/topic/' + that.container_name + that.random, function (event) {\n            // let content=JSON.parse(event.body);\n            // console.log(content)\n            that.deployLog += event.body + \"</br>\";\n            var textarea1 = document.getElementById('log-container');\n            textarea1.scrollTop = textarea1.scrollHeight;\n          }, {\n            token: \"kltoen\"\n          });\n        });\n      }\n    },\n    closeSocket: function closeSocket() {\n      var that = this;\n\n      if (this.stompClient != null) {\n        this.stompClient.disconnect();\n        this.stompClient = null;\n        that.dockerlogVisible = false;\n      }\n    },\n    reflashPage: function reflashPage() {\n      var NewPage = '_empty' + '?time=' + new Date().getTime() / 500;\n      this.$router.push(NewPage);\n      this.$router.go(-1);\n    }\n  }\n};",{"version":3,"sources":["Easyci.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"width: 80%;margin: 0 auto\">\r\n      <div class=\"demo_container\" >\r\n        <el-select v-model=\"serverid\" class=\"demo\"  placeholder=\"请选择服务器\" style=\"width: 10%;\">\r\n          <el-option\r\n                  v-for=\"item in searchServerList\"\r\n                  :key=\"item.id\"\r\n                  :label=\"item.server_ip\"\r\n                  :value=\"item.id\">\r\n          </el-option>\r\n        </el-select>\r\n        <el-row class=\"button\"><el-button @click=\"add()\" >新增</el-button></el-row>\r\n        <el-row class=\"button\"><el-button @click=\"getOnePs()\" >查看</el-button></el-row>\r\n        <el-row class=\"button\"><el-button @click=\"resetPs()\" >重置</el-button></el-row>\r\n        <el-row class=\"button\"><el-button @click=\"autoFresh()\" >{{isAutoFresh ? '关闭自动刷新' : '开启自动刷新'}}</el-button></el-row>\r\n      </div>\r\n\r\n      <div class=\"demo_container\" >\r\n        <el-select v-model=\"giturl\" class=\"select\"  filterable  placeholder=\"构建项目\" value=\"\">\r\n          <el-option\r\n                  v-for=\"item in gitlabPro\"\r\n                  :key=\"item.http_url_to_repo\"\r\n                  :label=\"item.name\"\r\n                  :value=\"item.http_url_to_repo\">\r\n            <span style=\"float: left\">{{ item.name }}</span>\r\n            <span style=\"float: right; color: #8492a6; font-size: 13px\">{{ item.http_url_to_repo }}</span>\r\n          </el-option>\r\n        </el-select>\r\n        <el-input v-model=\"ports\" class=\"demo\" style=\"width: 10%\" placeholder=\"端口5000:5000\"></el-input>\r\n        <el-select v-model=\"langu\" class=\"select\" placeholder=\"项目语言\" value=\"\">\r\n          <el-option\r\n                  v-for=\"item in langopt\"\r\n                  :key=\"item.label\"\r\n                  :label=\"item.label\"\r\n                  :value=\"item.label\">\r\n          </el-option>\r\n        </el-select>\r\n        <el-input v-model=\"maillist\" class=\"demo\" placeholder=\"请输入收件人邮箱\"></el-input>\r\n        <el-select v-model=\"deploy_way\" class=\"select\"  placeholder=\"部署方式\" value=\"\">\r\n          <el-option\r\n                  v-for=\"item in deployServerList\"\r\n                  :key=\"item.server_ip\"\r\n                  :label=\"item.server_ip\"\r\n                  :value=\"item.server_ip\">\r\n          </el-option>\r\n        </el-select>\r\n        <el-row  class=\"button\">\r\n          <el-button @click=\"deploy()\" >部署</el-button>\r\n        </el-row>\r\n\r\n<!--        @close=\"killBuild()\"-->\r\n        <el-dialog title=\"部署日志\"\r\n                   :visible.sync=\"dialogVisible\"\r\n                   :close-on-click-modal=\"false\"\r\n                   style=\"padding: 50px;\"\r\n                    @close=\"reflashPage()\">\r\n          <!--        <div v-html=\"deployLog\" id=\"log-container\" style=\"text-align:left;height: 450px; overflow-y: scroll; background: #333; color: #aaa; padding: 50px;\"></div>-->\r\n          <el-input id=\"textarea_id\"\r\n                    type=\"textarea\"\r\n                    :rows=\"20\"\r\n                    placeholder=\"这是日志\"\r\n                    v-model=\"textarea\"  readonly=\"\">\r\n          </el-input>\r\n        </el-dialog>\r\n        <el-dialog title=\"实时日志\"\r\n                   :visible.sync=\"dockerlogVisible\"\r\n                   :close-on-click-modal=\"false\"\r\n                   width=\"80%\"\r\n                   style=\"padding: 50px;\"\r\n                   @close=\"closeWebSocket(),closeSocket()\">\r\n          <div v-html=\"deployLog\" id=\"log-container\" style=\"text-align:left;height: 450px; overflow-y: scroll; background: #333; color: #aaa; padding: 50px;\"></div>\r\n        </el-dialog>\r\n\r\n        <el-dialog\r\n                title=\"添加服务器\"\r\n                :visible.sync=\"showInsertServe\"\r\n                :close-on-click-modal=\"false\"\r\n                width=\"40%\" >\r\n          <el-form :model=\"form\">\r\n            <el-form-item label=\"服务器IP地址：\" :label-width=\"formLabelWidth\">\r\n              <el-input v-model=\"form.server\" auto-complete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"服务器端口：\" :label-width=\"formLabelWidth\">\r\n              <el-input v-model=\"form.port\" auto-complete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"用户名：\" :label-width=\"formLabelWidth\">\r\n              <el-input v-model=\"form.username\" auto-complete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"密码：\" :label-width=\"formLabelWidth\">\r\n              <el-input v-model=\"form.password\" auto-complete=\"off\"></el-input>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button type=\"primary\" @click=\"addserver()\">添加</el-button>\r\n          </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"设置系统配置\"\r\n                   :show-close=\"false\"\r\n                   :close-on-click-modal=\"false\"\r\n                   :close-on-press-escape=\"false\"\r\n                   :visible.sync=\"isLoginGitLabVisible\"\r\n                   width=\"80%\"\r\n                   style=\"padding: 50px;\">\r\n            <el-form ref=\"loginForm\" :model=\"loginform\" :rules=\"rules\" label-width=\"80px\" class=\"login-box\">\r\n              <el-form-item label=\"gitlab\" prop=\"githost\">\r\n                <el-input type=\"text\" placeholder=\"请输入gitlab地址\" v-model=\"loginform.githost\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"账号\" prop=\"username\">\r\n                <el-input type=\"text\" placeholder=\"请输入账号\" v-model=\"loginform.username\"/>\r\n              </el-form-item>\r\n              <el-form-item label=\"密码\" prop=\"password\">\r\n                <el-input type=\"password\" placeholder=\"请输入密码\" v-model=\"loginform.password\"/>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button type=\"primary\" v-on:click=\"onSubmit('loginForm')\">登录</el-button>\r\n              </el-form-item>\r\n            </el-form>\r\n\r\n            <el-dialog\r\n                    title=\"温馨提示\"\r\n                    :visible.sync=\"loginmessage\"\r\n                    width=\"30%\">\r\n              <span>请输入账号和密码、git地址</span>\r\n              <span slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button type=\"primary\" @click=\"loginmessage = false\">确 定</el-button>\r\n              </span>\r\n            </el-dialog>\r\n        </el-dialog>\r\n      </div>\r\n\r\n      <h4><p align=\"left\">本机容器列表</p></h4>\r\n      <el-table\r\n                :data=\"localtableData\"\r\n                border>\r\n        <el-table-column prop=\"container_id\" label=\"容器id\" width=\"115\"></el-table-column>\r\n        <el-table-column prop=\"image_name\" label=\"镜像名称\" width=\"335\"></el-table-column>\r\n        <el-table-column label=\"状态\" width=\"50\">\r\n          <template slot-scope=\"scope\">\r\n            <img v-if=\"scope.row.status === 'Up'\" :src=\"require('../../assets/static/up.png')\" width=\"30\" height=\"30\" class=\"head_pic\"/>\r\n            <img v-else-if=\"scope.row.status === 'Exited'\" :src=\"require('../../assets/static/down.png')\" width=\"30\" height=\"30\" class=\"head_pic\"/>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"created\" label=\"创建时间\" width=\"120\"></el-table-column>\r\n        <el-table-column prop=\"ports\" label=\"端口映射\" width=\"320\"></el-table-column>\r\n        <el-table-column prop=\"container_name\" label=\"容器名称\" width=\"155\"></el-table-column>\r\n        <el-table-column prop=\"server_ip\" label=\"服务器\" width=\"110\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"200\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button @click=\"startDocker(scope.row)\" type=\"text\" size=\"small\">启动</el-button>\r\n            <el-button @click=\"stopDocker(scope.row)\" type=\"text\" size=\"small\">停止</el-button>\r\n            <el-button @click=\"restartDocker(scope.row)\" type=\"text\" size=\"small\">重启</el-button>\r\n            <el-button @click=\"destroyDocker(scope.row)\" type=\"text\" size=\"small\">销毁</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <h4><p align=\"left\">服务器容器列表</p></h4>\r\n      <el-table\r\n              :data=\"tableData\"\r\n              border>\r\n        <el-table-column prop=\"container_id\" label=\"容器id\" width=\"115\"></el-table-column>\r\n        <el-table-column prop=\"image_name\" label=\"镜像名称\" width=\"335\"></el-table-column>\r\n        <el-table-column label=\"状态\" width=\"50\">\r\n          <template slot-scope=\"scope\">\r\n            <img v-if=\"scope.row.status === 'Up'\" :src=\"require('../../assets/static/up.png')\" width=\"30\" height=\"30\" class=\"head_pic\"/>\r\n            <img v-else-if=\"scope.row.status === 'Exited'\" :src=\"require('../../assets/static/down.png')\" width=\"30\" height=\"30\" class=\"head_pic\"/>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"created\" label=\"创建时间\" width=\"120\"></el-table-column>\r\n        <el-table-column prop=\"ports\" label=\"端口映射\" width=\"320\"></el-table-column>\r\n        <el-table-column prop=\"container_name\" label=\"容器名称\" width=\"155\"></el-table-column>\r\n        <el-table-column prop=\"server_ip\" label=\"服务器\" width=\"110\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"200\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button @click=\"startDocker(scope.row)\" type=\"text\" size=\"small\">启动</el-button>\r\n            <el-button @click=\"stopDocker(scope.row)\" type=\"text\" size=\"small\">停止</el-button>\r\n            <el-button @click=\"restartDocker(scope.row)\" type=\"text\" size=\"small\">重启</el-button>\r\n            <el-button @click=\"destroyDocker(scope.row)\" type=\"text\" size=\"small\">销毁</el-button>\r\n            <el-button @click=\"dockerLogs(scope.row)\" type=\"text\" size=\"small\">日志</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  export default {\r\n    name: 'easyci',\r\n    props: {\r\n      msg: String\r\n    },\r\n    data () {\r\n      return {\r\n        params:{\r\n          username:'',\r\n          password:''\r\n        },\r\n        dialogTableVisible: false,\r\n        tableData: [],\r\n        localtableData: [],\r\n        langopt: [{\r\n          label: 'java'\r\n        }, {\r\n          label: 'vue'\r\n        }],\r\n        langu: '',\r\n        serverid: '',\r\n        deployopt: [],\r\n        gitlabPro: [],\r\n        deploy_way: '',\r\n        searchServerList: [],\r\n        deployServerList: [],\r\n        showInsertServe:false,\r\n        form: {\r\n          server: '',\r\n          port: '',\r\n          username: '',\r\n          password: '',\r\n          islocal: 0,\r\n        },\r\n        giturl: '',\r\n        ports: '',\r\n        maillist: '',\r\n        textarea: '',\r\n        start: 0,\r\n        status:true,\r\n        dialogVisible:false,\r\n        websocket: null,\r\n        stompClient: null,\r\n        deployLog: '',\r\n        deploying_project:'',\r\n        dockerlogVisible:false,\r\n        img: '',\r\n        isDockerPsOne: false,\r\n        isReSet:false,\r\n        isAutoFresh:false,\r\n        isLoginGitLabVisible:false,\r\n        formLabelWidth: '120px',\r\n        freshnum:0,\r\n        container_name: '',\r\n        server_ip:'',\r\n        loginmessage:false,\r\n        loginform: {\r\n          username: '',\r\n          password: '',\r\n          githost: ''\r\n        },\r\n        random:'',\r\n        rules: {\r\n          githost: [\r\n            {required: true, message: '地址不可为空', trigger: 'blur'}\r\n          ],\r\n          username: [\r\n            {required: true, message: '账号不可为空', trigger: 'blur'}\r\n          ],\r\n          password: [\r\n            {required: true, message: '密码不可为空', trigger: 'blur'}\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      // //连接发生错误的回调方法\r\n      // this.websocket.onerror = function(){\r\n      //   console.log(\"error\");\r\n      // };\r\n      //\r\n      // //连接成功建立的回调方法\r\n      // this.websocket.onopen = function(event){\r\n      //   console.log(\"open\");\r\n      // }\r\n      //\r\n      // //接收到消息的回调方法\r\n      // this.websocket.onmessage = function(event){\r\n      //   console.log(event.data);\r\n      // }\r\n      //\r\n      // //连接关闭的回调方法\r\n      // this.websocket.onclose = function(){\r\n      //   let that = this\r\n      //   that.textarea = \"close\";\r\n      // }\r\n      //\r\n      //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n      window.onbeforeunload = function() {\r\n        let that = this\r\n        that.websocket.close();\r\n        that.stompClient.disconnect();\r\n        that.websocket = null\r\n        that.stompClient = null\r\n      }\r\n\r\n      // this.getSearchServerList();\r\n      // this.getDeployServerList();\r\n      // // this.getProjects();\r\n      // this.getDockerPs();\r\n      // this.getLocalPs();\r\n      this.IsSetSystemSetting()\r\n    },\r\n    methods:{\r\n      getProjects(){\r\n        let that = this\r\n        this.axios.post('/api/gitlab/projects', {\r\n        }).then(function (response) {\r\n          if (response.data.status){\r\n            that.gitlabPro = response.data.list\r\n          } else {\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      onSubmit(formName) {\r\n        let that = this\r\n        this.startLoading(\"验证中…\")\r\n        this.axios.post('/api/gitlab/login', {\r\n          username:that.loginform.username,\r\n          password:that.loginform.password,\r\n          githost:that.loginform.githost\r\n        }).then(function (response) {\r\n          that.endLoading()\r\n          if (response.data.status){\r\n            that.$message.success(response.data.errorDesc);\r\n            that.isLoginGitLabVisible = false\r\n            that.getSearchServerList();\r\n            that.getDeployServerList();\r\n            that.getProjects();\r\n            that.getDockerPs();\r\n            that.getLocalPs();\r\n          }else{\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      IsSetSystemSetting(){\r\n        let that = this\r\n        this.axios.post('/api/gitlab/isSet', {\r\n        }).then(function (response) {\r\n          if (response.data.status){\r\n            that.isLoginGitLabVisible = false\r\n            that.getSearchServerList();\r\n              that.getDeployServerList();\r\n            that.getProjects();\r\n            that.getDockerPs();\r\n            that.getLocalPs();\r\n          }else{\r\n            that.isLoginGitLabVisible = true\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getDockerPs(){\r\n        let that = this\r\n        this.axios.post('/api/docker/allps', {\r\n        }).then(function (response) {\r\n          // that.$message(response.data.errorDesc);\r\n          if (response.data.status){\r\n            if (response.data.list.status === \"Up\"){\r\n              that.img = require('../../assets/static/up.png')\r\n            }else{\r\n              that.img = require('../../assets/static/down.png')\r\n            }\r\n            that.tableData = response.data.list;\r\n          } else {\r\n            that.showInsertServe = true\r\n            that.$message.error(\"请添加服务器\")\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getSearchServerList(){\r\n        let that = this\r\n        this.axios.get('/api/server/searchServerList', {\r\n        }).then(function (response) {\r\n          that.searchServerList = response.data.list\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getDeployServerList(){\r\n        let that = this\r\n        this.axios.get('/api/server/deployServerList', {\r\n        }).then(function (response) {\r\n          that.deployServerList = response.data.list\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      autoFresh(){\r\n        let that = this\r\n        that.freshnum = 0\r\n        that.isAutoFresh = ! that.isAutoFresh\r\n        var a=setInterval(()=>{\r\n          if (that.isAutoFresh){\r\n            if (that.freshnum === 0) {\r\n              that.$message(\"开启自动刷新\")\r\n            }\r\n            if (! that.isReSet && that.isDockerPsOne){\r\n              if (that.serverid != null && that.serverid !== '') {\r\n                this.getOnePs();\r\n              }\r\n              this.getLocalPs();\r\n              that.freshnum += 1\r\n            } else {\r\n              that.freshnum += 1\r\n              this.getDockerPs();\r\n              this.getLocalPs();\r\n            }\r\n          }else{\r\n            clearInterval(a)\r\n            that.$message(\"关闭自动刷新\")\r\n          }\r\n        }, 1000);\r\n      },\r\n      resetPs(){\r\n        let that = this\r\n        that.serverid = ''\r\n        that.isReSet = true\r\n        this.getDockerPs();\r\n        this.getLocalPs();\r\n      },\r\n      getLocalPs(){\r\n        let that = this\r\n        this.axios.post('/api/docker/localps', {\r\n        }).then(function (response) {\r\n          // that.$message(response.data.errorDesc);\r\n          if (response.data.list.status === \"Up\"){\r\n            that.img = require('../../assets/static/up.png')\r\n          }else{\r\n            that.img = require('../../assets/static/down.png')\r\n          }\r\n          that.localtableData = response.data.list;\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getOnePs(){\r\n        let that = this\r\n        if (this.serverid == null || this.serverid === '') {\r\n          that.$message.warning(\"请选择服务器ip\")\r\n          return false;\r\n        }\r\n        this.axios.post('/api/docker/oneps', {\r\n          serverid:this.serverid,\r\n        },).then(function (response) {\r\n          // that.$message(response.data.errorDesc);\r\n          that.tableData = response.data.list\r\n          that.isDockerPsOne = response.data.status\r\n          that.isReSet = ! response.data.status\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      },\r\n      add(){\r\n        this.showInsertServe = ! this.showInsertServe\r\n      },\r\n      addserver(){\r\n        let that = this\r\n        this.startLoading(\"认证中…\")\r\n        this.axios.post('/api/server/add', {\r\n          server_ip:this.form.server,\r\n          server_port:this.form.port,\r\n          server_username:this.form.username,\r\n          server_password:this.form.password,\r\n          is_local:this.form.islocal\r\n        },).then(function (response) {\r\n          that.endLoading()\r\n          if (response.data.status){\r\n            that.$message.success(response.data.errorDesc);\r\n            that.showInsertServe = false\r\n            that.reflashPage()\r\n          }else {\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n      },\r\n      deploy() {\r\n        let that = this\r\n        that.status = true\r\n        that.dialogVisible = true\r\n        that.textarea = ''\r\n        setTimeout(function() {\r\n          that.logs()\r\n        }, 3000)\r\n        this.axios.post('/api/docker/build', {\r\n          giturl: this.giturl,\r\n          ports: this.ports,\r\n          language: this.langu,\r\n          mails: this.maillist,\r\n          deploy_way: this.deploy_way\r\n        }).then(function (response) {\r\n          that.status = response.data.status\r\n          if (!response.data.status) {\r\n            that.dialogVisible = response.data.status\r\n            that.$message.error(response.data.errorDesc);\r\n          }else {\r\n            that.$message.success(response.data.errorDesc);\r\n            if (that.isDockerPsOne){\r\n              if (that.serverid != null && that.serverid !== '') {\r\n                that.getOnePs();\r\n              }\r\n              that.getLocalPs();\r\n            } else {\r\n              that.getDockerPs();\r\n              that.getLocalPs();\r\n            }\r\n          }\r\n        })\r\n      },\r\n      logs(){\r\n        this.start = 0\r\n        this.deployLogs()\r\n      },\r\n      deployLogs(){\r\n        let that = this\r\n        this.axios.post('/api/docker/deployLogs', {\r\n          giturl: this.giturl,\r\n          deploy_way: this.deploy_way,\r\n          start: this.start\r\n        },).then(function (response) {\r\n          if (response.data.list.log === \"…\") {\r\n            that.textarea = \"\"\r\n            that.deployLogs()\r\n          }else {\r\n            that.textarea += response.data.list.log\r\n            that.start = response.data.list.start\r\n            if (response.data.list.endsign  !==0){\r\n              that.deployLogs()\r\n              const textarea1 = document.getElementById('textarea_id');\r\n              textarea1.scrollTop = textarea1.scrollHeight;\r\n            }\r\n          }\r\n        })\r\n      },\r\n      dockerLogs(row){\r\n        let that = this\r\n        that.dockerlogVisible = true\r\n        that.deployLog = ''\r\n        that.random = Math.floor(Math.random()*20)\r\n        that.container_name = row.container_name\r\n        that.server_ip = row.server_ip\r\n        // this.axios.post('/api/docker/dockerLogs', {\r\n        //   container_name: row.container_name,\r\n        //   server_ip: row.server_ip\r\n        // },).then(function (response) {\r\n        //   // that.textarea += response.data.list.log\r\n        //   // that.start = response.data.list.start\r\n        //   // const textarea1 = document.getElementById('textarea_id');\r\n        //   // textarea1.scrollTop = textarea1.scrollHeight;\r\n        //   if (! that.dockerlogVisible) {\r\n        //     return\r\n        //   }\r\n        // })\r\n        let name = row.container_name + \"|\" + that.random + \"|\" + row.server_ip\r\n        if('WebSocket' in window){\r\n          this.websocket = new WebSocket(\"ws://\" + location.hostname + \":9875/websocket/\" + name);\r\n        }else{\r\n          alert('Not support websocket')\r\n        }\r\n        if (that.dockerlogVisible){\r\n          that.openSocket()\r\n        }else {\r\n          that.closeWebSocket()\r\n          that.closeSocket()\r\n        }\r\n      },\r\n      killDockerLogs(row){\r\n        let that = this\r\n        this.axios.post('/api/docker/killLogs', {\r\n          container_name: that.container_name,\r\n          server_ip: that.server_ip\r\n        },).then(function (response) {\r\n          if(response.data.status){\r\n            that.$message(\"关闭实时日志\")\r\n          }\r\n        })\r\n      },\r\n      killBuild(){\r\n        let that = this\r\n        this.axios.post('/api/docker/killbuild', {\r\n          giturl: that.giturl\r\n        },).then(function (response) {\r\n          if(response.data.status){\r\n            that.$message(\"关闭构建\")\r\n            that.status = false\r\n          }\r\n        })\r\n      },\r\n      startDocker(row){\r\n        let that = this\r\n        this.startLoading(\"启动中…\")\r\n        this.axios.post('/api/docker/dockerExec', {\r\n          container_name: row.container_name,\r\n          server_ip: row.server_ip,\r\n          cmd: 'start'\r\n        },).then(function (response) {\r\n          that.endLoading()\r\n          if (response.data.status){\r\n            that.$message.success(response.data.errorDesc);\r\n            if (that.isDockerPsOne){\r\n              if (that.serverid != null && that.serverid !== '') {\r\n                that.getOnePs();\r\n              }\r\n              that.getLocalPs();\r\n            } else {\r\n              that.getDockerPs();\r\n              that.getLocalPs();\r\n            }\r\n          } else {\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n      },\r\n      stopDocker(row){\r\n        let that = this\r\n        this.startLoading(\"停止中…\")\r\n        this.axios.post('/api/docker/dockerExec', {\r\n          container_name: row.container_name,\r\n          server_ip: row.server_ip,\r\n          cmd: 'stop'\r\n        },).then(function (response) {\r\n          that.endLoading()\r\n          if (response.data.status){\r\n            that.$message.success(response.data.errorDesc);\r\n            if (that.isDockerPsOne){\r\n              if (that.serverid != null && that.serverid !== '') {\r\n                that.getOnePs();\r\n              }\r\n              that.getLocalPs();\r\n            } else {\r\n              that.getDockerPs();\r\n              that.getLocalPs();\r\n            }\r\n          } else {\r\n            that.$message.error(response.data.errorDesc);\r\n          }\r\n        })\r\n      },\r\n      restartDocker(row){\r\n        let that = this\r\n        this.startLoading(\"重启中…\")\r\n        this.axios.post('/api/docker/dockerExec', {\r\n          container_name: row.container_name,\r\n          server_ip: row.server_ip,\r\n          cmd: 'restart'\r\n        },).then(function (response) {\r\n          that.endLoading()\r\n          if (response.data.status){\r\n            that.$message.success(response.data.errorDesc);\r\n            if (that.isDockerPsOne){\r\n              if (that.serverid != null && that.serverid !== '') {\r\n                that.getOnePs();\r\n              }\r\n              that.getLocalPs();\r\n            } else {\r\n              that.getDockerPs();\r\n              that.getLocalPs();\r\n            }\r\n          } else {\r\n            that.$message.error(response.data.errorDesc);\r\n          }        })\r\n      },\r\n      destroyDocker(row){\r\n        let that = this\r\n        this.startLoading(\"销毁中…\")\r\n        if (row.status === \"Up\"){\r\n          that.$message.warning(\"请先停止容器！\")\r\n          that.endLoading()\r\n          return false;\r\n        }else {\r\n          this.axios.post('/api/docker/dockerExec', {\r\n            container_name: row.container_name,\r\n            server_ip: row.server_ip,\r\n            cmd: 'rm'\r\n          },).then(function (response) {\r\n            that.endLoading()\r\n            if (response.data.status){\r\n              that.$message.success(response.data.errorDesc);\r\n              if (that.isDockerPsOne){\r\n                if (that.serverid != null && that.serverid !== '') {\r\n                  that.getOnePs();\r\n                }\r\n                that.getLocalPs();\r\n              } else {\r\n                that.getDockerPs();\r\n                that.getLocalPs();\r\n              }\r\n            } else {\r\n              that.$message.error(response.data.errorDesc);\r\n            }        })\r\n        }\r\n      },\r\n      // sendmessage(){\r\n      //   let that = this\r\n      //   that.postValue.id=1;\r\n      //   that.postValue.message=1;\r\n      //   this.websocket.send(JSON.stringify(that.postValue));\r\n      // },\r\n      //关闭连接\r\n      closeWebSocket(){\r\n        let that = this\r\n        if(this.websocket != null) {\r\n          this.websocket.close();\r\n        }\r\n        that.dockerlogVisible = false\r\n      },\r\n      openSocket() {\r\n        let that = this\r\n        if(this.stompClient==null){\r\n          let socket = new this.SockJS('http://' +  location.hostname + ':9875/websocket');\r\n          this.stompClient = this.Stomp.over(socket);\r\n          this.stompClient.connect({},\r\n          function() {\r\n            that.stompClient.subscribe('/topic/' + that.container_name + that.random, function(event) {\r\n              // let content=JSON.parse(event.body);\r\n              // console.log(content)\r\n              that.deployLog += (event.body + \"</br>\")\r\n              const textarea1 = document.getElementById('log-container');\r\n              textarea1.scrollTop = textarea1.scrollHeight;\r\n            },{\r\n              token:\"kltoen\"\r\n            });\r\n          });\r\n        }\r\n      },\r\n      closeSocket() {\r\n        let that = this\r\n        if (this.stompClient != null) {\r\n          this.stompClient.disconnect();\r\n          this.stompClient=null;\r\n          that.dockerlogVisible = false\r\n        }\r\n       },\r\n      reflashPage(){\r\n        let NewPage = '_empty' + '?time=' + new Date().getTime()/500;\r\n        this.$router.push(NewPage);\r\n        this.$router.go(-1);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n  .demo_container:after {\r\n    content: \"\";\r\n    clear: both;\r\n    display: block;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    marign-bottom: 20px;\r\n  }\r\n  .demo{\r\n    width: 20%;\r\n    box-sizing: border-box;\r\n    float: left;\r\n  }\r\n  .server{\r\n    width: 40%;\r\n    box-sizing: border-box;\r\n    float: right;\r\n  }\r\n  .select{\r\n    width: 10%;\r\n    box-sizing: border-box;\r\n    float: left;\r\n  }\r\n  .button{\r\n    width: 5%;\r\n    box-sizing: border-box;\r\n    float: left;\r\n  }\r\n  .buttonr{\r\n    width: 5%;\r\n    box-sizing: border-box;\r\n    float: right;\r\n  }\r\n  h3 {\r\n    margin: 40px 0 0;\r\n  }\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  li {\r\n    /*display: inline-block;*/\r\n    margin: 0 10px;\r\n  }\r\n  a {\r\n    color: #42b983;\r\n  }\r\n</style>\r\n"],"sourceRoot":"src/components/views"}]}